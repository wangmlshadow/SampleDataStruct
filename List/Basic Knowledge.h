#pragma once
/*
线性表（linear_list）：
	n个数据元素的有限序列
	每个数据元素由若干数据项（item）组成，常将数据元素称为记录（record），含有大量记录
	的线性表又称为文件。

	线性表的顺序实现：
		用一组地址连续的存储单元依次存储线性表的数据元素。
		再用C语言实现时，需要在线性表初始化时分配一定大小的初始存储空间，但随着初始空间
		被占用，需要考虑每次线性表空间增量的问题，下面实现仅仅是简单的选择一个空间增量，
		在线性表满时重新分配空间。

		顺序表的优缺点：
		可以随机取表中任一元素，它的存储位置可用简单直观的公式表示：base + (pos-1) * sizeof(ElemType)
		在插入与删除时需移动大量元素

	线性表的链式表示和实现：
		链式实现并不要求逻辑上相邻的元素在物理位置上也相邻
		链式存储结构使用一组任意存储单元存储线性表的数据元素，这些存储单元可以连续也可以不连续，为了
		表示每个数据元素与其后继元素之间的逻辑关系，每个数据元素除了存储其自身的数据信息，还需存储其
		后继的存储位置信息，即对应于每个结点包含的数据域和指针域，各个数据元素通过指针域连接成链表。


	循环链表：最后一个结点的指针域指向头结点，整个链表形成一个环

	双向链表：
	    在单链表中，查询一个结点的前驱需要从头指针出发，为克服单链表这种单向性的缺点，可以利用双向链表
        
		双向链表的结点中有两个指针域，其中一个指向前驱，一个指向后继


	栈：
		限定仅在表尾进行插入或删除操作的线性表
		表尾端称为栈顶(top)，表头端称为栈底(bottom)
		特点：在栈中，后入栈的元素先出栈

	队列：
	    与栈相反，队列是一种先入先出(FIFO)的线性表
		它允许在表的一端插入元素，在另一端删除元素
		允许插入的一端是队尾(rear)，允许删除的一端是队头(front)

    循环队列：
	    用一组地址连续的存储单元依次存放从队列头到队列尾的元素
		
		在实现过程中，使得这一组连续的存储单元在逻辑上成为一个环

		此处与顺序队列不同，不能通过存储再分配来扩大数组空间，因为即使队列尾指向
		数组最后一个单元，队列可用空间也不一定为0，这是由于逻辑上的环状结构，如果
		此时队列头指向的并非数组第一个单元，那么仍有剩余空间给队列新元素使用。

		此处有一个问题需要注意：
		    如何判断队列是否为空？
		    当front=rear时，队列可能为空，也可能是因为整个队列占满了整个可用的存储空间

			解决此问题的方法有：
			    1）设置一个标志位用于标识是否为空
				2）少用一个元素空间，约定以队列头指针在队列尾指针的下一位为满
				下面实现采用增设一个标志位的方法
*/